# -*- coding: utf-8 -*-
"""Chapter_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HZg1fM_HRJJn6dDR4pUU_ZeU5eTxRUD2

# **Expression Matcher**
"""

from sympy import symbols, Eq, solve

# Define mathematical operations
a, b, c = symbols('a b c')
add = lambda x, y: x + y
mul = lambda x, y: x * y

# Define equations
expression_orig = add(mul(3, -2), mul(add(1, mul(2, 3)), -1))
expression1 = add(mul(add(1, mul(2, a)), b), mul(3, c))
expression2 = add(mul(c, 3), mul(b, add(mul(2, a), 1)))
expression3 = add(add(mul(mul(2, a), b), b), mul(3, c))

# Solve equations
solution1 = solve(Eq(expression1, expression_orig), (a, b, c))
solution2 = solve(Eq(expression2, expression_orig), (a, b, c))
solution3 = solve(Eq(expression3, expression_orig), (a, b, c))

print("Solution 1:", solution1)
print("Solution 2:", solution2)
print("Solution 3:", solution3)

"""# **Family Code**"""

import json
from sympy import Eq, solve, symbols

# Check if 'x' is the parent of 'y'
def parent(x, y, father_data, mother_data):
    return (father(x, y, father_data) or mother(x, y, mother_data))

# Check if 'x' is the grandparent of 'y'
def grandparent(x, y, father_data, mother_data):
    temp = symbols('temp')
    return (parent(x, temp, father_data, mother_data) and parent(temp, y, father_data, mother_data))

# Check for sibling relationship between 'a' and 'b'
def sibling(x, y, father_data, mother_data):
    temp = symbols('temp')
    return (parent(temp, x, father_data, mother_data) and parent(temp, y, father_data, mother_data))

# Check if x is y's uncle
def uncle(x, y, father_data, mother_data):
    temp = symbols('temp')
    return (father(temp, x, father_data) and grandparent(temp, y, father_data, mother_data))

def father(name, child, father_data):
    return (name, child) in father_data

def mother(name, child, mother_data):
    return (name, child) in mother_data

if __name__=='__main__':
    with open('relationships.json') as f:
        d = json.loads(f.read())

    father_data = [(list(item.keys())[0], list(item.values())[0]) for item in d['father']]
    mother_data = [(list(item.keys())[0], list(item.values())[0]) for item in d['mother']]

    # John's children
    name = 'John'
    children = [child for father_name, child in father_data if father_name == name]
    print("\nList of " + name + "'s children:")
    for child in children:
        print(child)

    # William's mother
    name = 'William'
    mother_name = [mother_name for mother_name, child in mother_data if child == name][0]
    print("\n" + name + "'s mother:\n" + mother_name)

    # Adam's parents
    name = 'Adam'
    parents = [parent for parent, child in father_data + mother_data if child == name]
    print("\nList of " + name + "'s parents:")
    for parent in parents:
        print(parent)

    # Wayne's grandparents
    name = 'Wayne'
    grandparents = [grandparent for grandparent, grandchild in ((grandparent, grandchild) for grandparent in father_data + mother_data for grandchild in father_data + mother_data if grandchild[1] == name)]
    print("\nList of " + name + "'s grandparents:")
    for grandparent in grandparents:
        print(grandparent)

    # Megan's grandchildren
    name = 'Megan'
    grandchildren = [grandchild for grandparent, grandchild in ((grandparent, grandchild) for grandparent in father_data + mother_data for grandchild in father_data + mother_data if grandparent[0] == name)]
    print("\nList of " + name + "'s grandchildren:")
    for grandchild in grandchildren:
        print(grandchild)

    # David's siblings
    name = 'David'
    siblings = [sibling for sibling in (sibling for parent, child in father_data + mother_data for sibling in father_data + mother_data if parent[1] == name and sibling[1] != name)]
    print("\nList of " + name + "'s siblings:")
    for sibling in siblings:
        print(sibling)

    # Tiffany's uncles
    name = 'Tiffany'
    name_father = [father_name for father_name, child in father_data if child == name][0]
    uncles = [uncle for uncle in (uncle for grandparent, grandchild in ((grandparent, grandchild) for grandparent in father_data + mother_data for grandchild in father_data + mother_data if grandparent[1] == name and grandchild[0] != name_father))]
    print("\nList of " + name + "'s uncles:")
    for uncle in uncles:
        print(uncle)

    # All spouses
    spouses = [(father_name, mother_name) for father_name, child in father_data for mother_name, child in mother_data if child == name]
    print("\nList of all spouses:")
    for spouse in spouses:
        print('Husband:', spouse[0], '<==> Wife:', spouse[1])

"""# **Prime**"""

from sympy.ntheory.generate import primerange, isprime

# Check if an element in the list is a prime number
def check_prime(x):
    return isprime(x)

# Check for prime numbers in the list
list_nums = (23, 4, 27, 17, 13, 10, 21, 29, 3, 32, 11, 19)
primes_in_list = [num for num in list_nums if check_prime(num)]
print('\nList of primes in the list:')
print(set(primes_in_list))

# Print first 7 prime numbers
first_7_primes = list(primerange(2, 20))
print('\nList of first 7 prime numbers:')
print(first_7_primes)

"""# **Puzzle**"""

from itertools import permutations

def solve_puzzle():
    # Define attributes
    names = ['Steve', 'Matthew', 'Jack', 'Alfred']
    pets = ['cat', 'dog', 'rabbit']
    colors = ['blue', 'black']
    countries = ['Canada', 'USA', 'Australia', 'France']

    # Generate all possible permutations
    all_permutations = permutations(names + pets + colors + countries)

    # Check each permutation against the given rules
    for perm in all_permutations:
        solution = dict(zip(['Name', 'Pet', 'Color', 'Country'], perm))

        # Rule 1: Steve's car is blue
        if solution.get('Name') == 'Steve' and solution.get('Color') != 'blue':
            continue

        # Rule 2: Person who owns the cat lives in Canada
        if solution.get('Pet') == 'cat' and solution.get('Country') != 'Canada':
            continue

        # Rule 3: Matthew lives in USA
        if solution.get('Name') == 'Matthew' and solution.get('Country') != 'USA':
            continue

        # Rule 4: The person who has a black car lives in Australia
        if solution.get('Color') == 'black' and solution.get('Country') != 'Australia':
            continue

        # Rule 5: Jack has a cat
        if solution.get('Name') == 'Jack' and solution.get('Pet') != 'cat':
            continue

        # Rule 6: Alfred lives in Australia
        if solution.get('Name') == 'Alfred' and solution.get('Country') != 'Australia':
            continue

        # Rule 7: Person who owns the dog lives in France
        if solution.get('Pet') == 'dog' and solution.get('Country') != 'France':
            continue

        # Rule 8: Who is the owner of the rabbit?
        rabbit_owner = solution.get('Name') if solution.get('Pet') == 'rabbit' else None

        # Print the solution if all rules are satisfied
        if rabbit_owner:
            print('\n' + rabbit_owner + ' is the owner of the rabbit')
            print('\nHere are all the details:')
            attribs = ['Name', 'Pet', 'Color', 'Country']
            print('\n' + '\t\t'.join(attribs))
            print('=' * 57)
            print('\t\t'.join([str(solution[attr]) for attr in attribs]))

            # Return the first valid solution
            return

# Solve the puzzle
solve_puzzle()

"""# **States**"""

coastal_states = set()
adjacent_states = {}

file_coastal = 'coastal_states.txt'
file_adjacent = 'adjacent_states.txt'

# Read the file containing the coastal states
with open(file_coastal, 'r') as f:
    line = f.read()
    coastal_states = set(line.split(','))

# Read the file containing the adjacent states
with open(file_adjacent, 'r') as f:
    adjlist = [line.strip().split(',') for line in f if line and line[0].isalpha()]

# Build the adjacency information
for L in adjlist:
    head, tail = L[0], L[1:]
    adjacent_states[head] = set(tail)

# Function to check if two states are adjacent
def are_adjacent(state1, state2):
    return state2 in adjacent_states.get(state1, set())

# Function to check if a state is coastal
def is_coastal(state):
    return state in coastal_states

# Is Nevada adjacent to Louisiana?
neighboring_states = are_adjacent('Nevada', 'Louisiana')
print('\nIs Nevada adjacent to Louisiana?:')
print('Yes' if neighboring_states else 'No')

# States adjacent to Oregon
adjacent_to_oregon = adjacent_states.get('Oregon', set())
print('\nList of states adjacent to Oregon:')
for state in adjacent_to_oregon:
    print(state)

# States adjacent to Mississippi that are coastal
coastal_adjacent_to_mississippi = [state for state in adjacent_states.get('Mississippi', set()) if is_coastal(state)]
print('\nList of coastal states adjacent to Mississippi:')
for state in coastal_adjacent_to_mississippi:
    print(state)

# List of 'n' states that border a coastal state
n = 7
bordering_coastal_states = [state for state in coastal_states if len(adjacent_states.get(state, set())) >= n]
print('\nList of ' + str(n) + ' states that border a coastal state:')
for state in bordering_coastal_states:
    print(state)

# List of states that are adjacent to Arkansas and Kentucky
adjacent_to_arkansas = adjacent_states.get('Arkansas', set())
adjacent_to_kentucky = adjacent_states.get('Kentucky', set())
states_adjacent_to_both = adjacent_to_arkansas.intersection(adjacent_to_kentucky)
print('\nList of states that are adjacent to Arkansas and Kentucky:')
for state in states_adjacent_to_both:
    print(state)